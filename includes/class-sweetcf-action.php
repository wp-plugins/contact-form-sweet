<?php

/**
 * Description of class-sweetcf-action
 * Action class for the functions to process ctf_action requests
 * Functions are called statically, so no need to instantiate the class
 */
class SWEETCF_Action {

	static $sw_contact_from_email, $sw_contact_from_name, $sw_contact_mail_sender;

	static function do_ctf_action() {
		// See if a ctf_action has been invoked
		// Is there a ctf_action pending?
		if (isset($_POST['ctf_action'])) {
			// A ctf_action has been invoked by this plugin--process it
			// Backup Settings and Preview Form are handled in a different place
			// Admins only
			if (function_exists('current_user_can') && !current_user_can('manage_options'))
				wp_die(__('You do not have permissions for managing this option', 'sweetcontact'));

			switch ($_POST['ctf_action']) {

				case esc_attr__('Copy Settings', 'sweetcontact'):
					//self::copy_settings();
					break;
				case esc_attr__('Reset Styles on all forms', 'sweetcontact'):
					//self::reset_all_styles();
					break;
				case esc_attr__('Restore Settings', 'sweetcontact'):
					//self::restore_settings();
					break;
				case esc_attr__('Send Test', 'sweetcontact'):
					self::send_test_email();
					break;
				case esc_attr__('Add Field', 'sweetcontact'):
					SWEETCF_Options::add_field();
					break;
				case esc_attr__('Add Form', 'sweetcontact'):
					SWEETCF_Options::add_form();
					break;
				case esc_attr__('Reset Form', 'sweetcontact'):
					SWEETCF_Options::reset_form();
					break;
				case esc_attr__('Delete Form', 'sweetcontact'):
					SWEETCF_Options::delete_form();
					break;
				default:
			}
		}
	}

	static function copy_styles($this_form_arr, $destination_form_arr) {
		// Copy the contact form styles from $this_form_arr to $destination_form_arr
		$style_copy_arr = array(
			'border_enable',
			// Alignment DIVs
			'form_style', // Form DIV, how wide is the form DIV
			'left_box_style', // left box DIV, container for vcita
			'right_box_style', // right box DIV, container for vcita
			'clear_style', // clear both
			'field_left_style', // field left (wider)
			'field_prefollow_style', // field pre follow (narrower)
			'field_follow_style', // field follow
			'title_style', // Input labels alignment DIV
			'field_div_style', // Input fields alignment DIV
			'captcha_div_style_sm', // Small CAPTCHA DIV
			'captcha_div_style_m', // Large CAPTCHA DIV
			'captcha_image_style', // CAPTCHA alignment
			'captcha_reload_image_style', // CAPTCHA reload alignment
			'submit_div_style', // Submit DIV
			'border_style', // style of the form border (if border is enabled)
			// Style of labels, fields and text
			'required_style', // required field indicator
			'required_text_style', // required field text
			'hint_style', // small text hints like please enter your email again
			'error_style', // Input validation messages
			'redirect_style', // Redirecting message
			'fieldset_style', // style of the fieldset box (for field)
			'label_style', // Field labels
			'option_label_style', // Options labels
			'field_style', // Input text fields
			'captcha_input_style', // CAPTCHA input field
			'textarea_style', // Input Textarea
			'select_style', // Input Select
			'checkbox_style', // Input checkbox
			'radio_style', // Input radio
			'placeholder_style', // placeholder style
			'button_style', // Submit button
			'reset_style', // Reset button
			'powered_by_style', // the "powered by" link
		);

		foreach ($style_copy_arr as $style_copy) {
			$destination_form_arr[$style_copy] = $this_form_arr[$style_copy];
		}
		return $destination_form_arr;
	}

	static function send_test_email() {

		// Send a test mail if necessary
		if (isset($_POST['sw_contact_to']) && check_admin_referer('sw_contact_options-options', 'fs_options')) {
			// Send a test email
			// new lines should be (\n for UNIX, \r\n for Windows and \r for Mac)

			SWEETCF_Options::$form_options = SWEETCF_Utils::get_form_options(SWEETCF_Options::$current_form, true);
			$php_eol = (!defined('PHP_EOL')) ? (($eol = strtolower(substr(PHP_OS, 0, 3))) == 'win') ? "\r\n" : (($eol == 'mac') ? "\r" : "\n") : PHP_EOL;
			$php_eol = (!$php_eol) ? "\n" : $php_eol;

			$email = $_POST['sw_contact_to'];
			$name = __('sweetContact Form', 'sweetcontact');
			if (SWEETCF_Utils::validate_email($email)) {

				$subject = __('Test email to ', 'sweetcontact') . $email;
				$message = __('This is a test email generated by the sweetContact Form WordPress plugin.', 'sweetcontact');
				$message = wordwrap($message, 70, $php_eol);

				$smtp_debug = '';
				$ctf_email_on_this_domain = SWEETCF_Options::$form_options['email_from']; // optional
				// prepare the email header
				self::$sw_contact_from_name = $name;
				self::$sw_contact_from_email = $email;
				//$sw_contact_mail_sender = $ctf_email_on_this_domain;
				if ($ctf_email_on_this_domain != '') {
					if (!preg_match("/,/", $ctf_email_on_this_domain)) {
						// just an email: user1@example.com
						$sw_contact_mail_sender = $ctf_email_on_this_domain;
						if (SWEETCF_Options::$form_options['email_from_enforced'] == 'true')
							self::$sw_contact_from_email = $ctf_email_on_this_domain;
					} else {
						// name and email: webmaster,user1@example.com
						list($key, $value) = explode(",", $ctf_email_on_this_domain);
						$key = trim($key);
						$value = trim($value);
						$sw_contact_mail_sender = $value;
						if (SWEETCF_Options::$form_options['email_from_enforced'] == 'true')
							self::$sw_contact_from_email = $value;
					}
				}
				$header_php = 'From: ' . self::$sw_contact_from_name . ' <' . self::$sw_contact_from_email . '>\n'; // header for php mail only
				$header = ''; // for php mail and wp_mail
				if (SWEETCF_Options::$form_options['email_reply_to'] != '') { // custom reply_to
					$header .= "Reply-To: " . SWEETCF_Options::$form_options['email_reply_to'] . "\n";
				} else {
					$header .= "Reply-To: $email\n";
				}
				if ($ctf_email_on_this_domain != '') {
					$header .= 'X-Sender: ' . $sw_contact_mail_sender . "\n";
					$header .= 'Return-Path: ' . $sw_contact_mail_sender . "\n";
				}
				$header .= 'Content-type: text/plain; charset=' . get_option('blog_charset') . $php_eol;

				@ini_set('sendmail_from', self::$sw_contact_from_email);

				// Check for safe mode
				$safe_mode = ((boolean) @ini_get('safe_mode') === false) ? 0 : 1;

				if (SWEETCF_Options::$form_options['php_mailer_enable'] == 'php') {
					// sending with php mail
					$header_php .= $header;
					// Start output buffering to grab smtp debugging output
					ob_start();
					if ($ctf_email_on_this_domain != '' && !$safe_mode) {
						// Pass the Return-Path via sendmail's -f command.
						$result = mail($email, $subject, $message, $header_php, '-f ' . $sw_contact_mail_sender);
					} else {
						// the fifth parameter is not allowed in safe mode
						$result = mail($email, $subject, $message, $header_php);
					}
					$smtp_debug = ob_get_clean();
				} else if (SWEETCF_Options::$form_options['php_mailer_enable'] == 'wordpress') {
					// sending with wp_mail
					add_filter('wp_mail_from', 'SWEETCF_Action::sweetcontact_form_from_email', 1); // took out _form
					add_filter('wp_mail_from_name', 'SWEETCF_Action::sweetcontact_form_from_name', 1); // took out _form
					if ($ctf_email_on_this_domain != '') {
						// Add an action on phpmailer_init to add Sender $this->sw_contact_mail_sender for Return-path in wp_mail
						// this helps spf checking when the Sender email address matches the site domain name
						add_action('phpmailer_init', 'SWEETCF_Action::sweetcontact_form_mail_sender', 1);
					}
					global $phpmailer;
					// Make sure the PHPMailer class has been instantiated
					// (copied verbatim from wp-includes/pluggable.php)
					// (Re)create it, if it's gone missing
					if (!is_object($phpmailer) || !is_a($phpmailer, 'PHPMailer')) {
						require_once ABSPATH . WPINC . '/class-phpmailer.php';
						require_once ABSPATH . WPINC . '/class-smtp.php';
						$phpmailer = new PHPMailer();
					}

					// Set SMTPDebug to level 2
					$phpmailer->SMTPDebug = 2;

					// Start output buffering to grab smtp debugging output
					ob_start();

					// Send the test mail
					$result = wp_mail($email, $subject, $message, $header);

					// Grab the smtp debugging output
					$smtp_debug = ob_get_clean();
				}

				// Output the response
				?>
				<div id="message" class="updated"><p><strong><?php
							_e('Test Message Sent', 'sweetcontact');
							echo '<br />' . SWEETCF_Options::$form_options['php_mailer_enable'];
							echo ' ' . $subject;
							?></strong></p>
					<?php if ($result != true) { ?>
						<p><?php _e('The result was:', 'sweetcontact'); ?></p>
						<?php /*echo '<p><a href="http://www.sweetcontactform.com/email-does-not-send">' . __('See FAQ', 'sweetcontact') . '</a></p>'; */?>
						<pre><?php esc_html(var_dump($result)); ?></pre>
						<?php
						if (SWEETCF_Options::$form_options['php_mailer_enable'] == 'wordpress') {
							?>
							<p><?php _e('The full debugging output is shown below:', 'sweetcontact'); ?></p>
							<?php /*echo '<p><a href="http://www.sweetcontactform.com/email-does-not-send">' . __('See FAQ', 'sweetcontact') . '</a></p>'; */?>
							<pre><?php esc_html(var_dump($phpmailer)); ?></pre>
							<?php
						}
					} else {
						echo '<p>' . _e('Be sure to check your email to see if you received it.', 'sweetcontact') . '</p>';
						/*echo '<p><a href="http://www.sweetcontactform.com/email-does-not-send">' . __('See FAQ', 'sweetcontact') . '</a></p>';*/
					}
					if ($smtp_debug != '') {
						?>
						<p><?php _e('The Email debugging output is shown below:', 'sweetcontact'); ?></p>
						<?php /*echo '<p><a href="http://www.sweetcontactform.com/email-does-not-send">' . __('See FAQ', 'sweetcontact') . '</a></p>';*/ ?>
						<pre><?php echo esc_html($smtp_debug) ?></pre>
						<?php
					}
				} else {
					echo '<div id="message" class="updated"><p><strong>' . __('Test failed: Invalid email address', 'sweetcontact') . '</strong></p>';
				}
				?>
			</div>
			<?php
		} // end Send a test mail if necessary
	}

	static function sweetcontact_form_from_email() {
		// called in send_test_email
		return self::$sw_contact_from_email;
	}

	static function sweetcontact_form_from_name() {
		// called in send_test_email
		return self::$sw_contact_from_name;
	}

	static function sweetcontact_form_mail_sender($phpmailer) {
		// called in send_test_email
		// add Sender for Return-path to wp_mail
		$phpmailer->Sender = self::$sw_contact_mail_sender;
	}

}
